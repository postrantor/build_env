{
  "version": "2.0.0",
  "tasks": [
    // Build tasks
    {
      "type": "colcon",
      "args": ["build", "--packages-select", "${input:packages_name}"],
      "problemMatcher": ["$gcc"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "focus": true,
        "echo": true
      },
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "label": "colcon: build select package"
    },
    {
      "type": "colcon",
      "args": ["build"],
      "problemMatcher": ["$gcc"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "focus": true,
        "echo": true
      },
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "label": "colcon: build whole workspace"
    },
    {
      "type": "colcon",
      "args": ["list"],
      "problemMatcher": ["$gcc"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "focus": true,
        "echo": true
      },
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "label": "colcon: list all packages"
    },
    // install dependencies
    {
      "label": "install: install dependencies for workspace",
      "detail": "install dependencies for whole workspace",
      "type": "shell",
      "command": "install-dependencies ${workspaceFolder}",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "focus": true,
        "echo": true
      },
      "problemMatcher": "$gcc"
    },
    // import repos
    {
      "label": "install: import src from quad.repos",
      "detail": "import quadruped repos to workspces, and ignore some packages",
      "type": "shell",
      "command": "import-quad-src && ignore-colcon-pkg",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "focus": false,
        "echo": true
      },
      "problemMatcher": "$gcc"
    },
    // update rosdep
    {
      "label": "install: update rosdep",
      "detail": "update rosdep for workspace",
      "type": "shell",
      "command": "update-rosdep",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "focus": false,
        "echo": true
      },
      "problemMatcher": "$gcc"
    },
    // debug
    {
      "label": "debug",
      "detail": "Build workspace (debug)",
      "type": "shell",
      "command": "./build.sh",
      "options": {
        "env": {
          "BUILD_TYPE": "Debug"
        }
      },
      "group": "build",
      "problemMatcher": "$gcc"
    },
    // Test tasks
    {
      "label": "test",
      "detail": "Run all unit tests and show results.",
      "type": "shell",
      "command": "./test.sh",
      "group": {
        "kind": "test",
        "isDefault": true
      }
    },
    // Clean
    {
      "label": "clean",
      "detail": "Run the clean target",
      "type": "shell",
      "command": "colcon build --cmake-target clean",
      "problemMatcher": "$gcc"
    },
    {
      "label": "purge",
      "detail": "Purge workspace by deleting all generated files.",
      "type": "shell",
      "command": "sudo rm -fr build install log; sudo py3clean .",
      "problemMatcher": []
    },
    {
      "label": "source",
      "detail": "Source workspace",
      "type": "shell",
      "command": "source /opt/ros/humble/setup.bash",
      "problemMatcher": []
    },
    // Linting and static code analysis tasks
    {
      "label": "fix",
      "detail": "Reformat files with uncrustify.",
      "type": "shell",
      "command": "ament_uncrustify --reformat src/",
      "problemMatcher": []
    },
    {
      "label": "uncrustify",
      "detail": "Lint files with uncrustify.",
      "type": "shell",
      "command": "ament_uncrustify src/",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      },
      "problemMatcher": [
        {
          "owner": "uncrustify",
          "source": "uncrustify",
          "fileLocation": "relative",
          "pattern": [
            // just the file name message
            {
              "regexp": "^(.*)'(.*)':",
              "kind": "file",
              "file": 2,
              "message": 1
            }
          ]
        }
      ]
    },
    {
      "label": "cpplint",
      "detail": "Lint files with cpplint.",
      "type": "ament",
      "task": "cpplint",
      "path": "src/",
      "problemMatcher": "$ament_cpplint",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      }
    },
    {
      "label": "cppcheck",
      "detail": "Run static code checker cppcheck.",
      "type": "ament",
      "task": "cppcheck",
      "path": "src/",
      "problemMatcher": "$ament_cppcheck",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      },
      "options": {
        "env": {
          "AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS": "1"
        }
      }
    },
    {
      "label": "lint_cmake",
      "detail": "Run lint on cmake files.",
      "type": "ament",
      "task": "lint_cmake",
      "path": "src/",
      "problemMatcher": "$ament_lint_cmake",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      }
    },
    {
      "label": "flake8",
      "detail": "Run flake8 on python files.",
      "type": "ament",
      "task": "flake8",
      "path": "src/",
      "problemMatcher": "$ament_flake8",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      }
    },
    {
      "label": "pep257",
      "detail": "Run pep257 on python files.",
      "type": "ament",
      "task": "pep257",
      "path": "src/",
      "problemMatcher": "$ament_pep257",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      }
    },
    {
      "label": "xmllint",
      "detail": "Run xmllint on xml files.",
      "type": "ament",
      "task": "xmllint",
      "path": "src/",
      "problemMatcher": "$ament_xmllint",
      "presentation": {
        "panel": "dedicated",
        "reveal": "silent",
        "clear": true
      }
    },
    {
      "label": "lint all",
      "detail": "Run all linters.",
      "dependsOn": [
        "cppcheck",
        "cpplint",
        "flake8",
        "lint_cmake",
        "pep257",
        "xmllint",
        "uncrustify"
      ],
      "problemMatcher": []
    },
    // Workspace editing tasks
    {
      "label": "new ament_cmake package",
      "detail": "Create a new ROS cpp package from a template.",
      "type": "shell",
      "command": "ros2 pkg create --destination-directory src --build-type ament_cmake ${input:package}",
      "problemMatcher": []
    },
    {
      "label": "new ament_python package",
      "detail": "Create a new ROS python package from a template.",
      "type": "shell",
      "command": "ros2 pkg create --destination-directory src --build-type ament_python ${input:package}",
      "problemMatcher": []
    },
    {
      "label": "import from workspace file",
      "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
      "type": "shell",
      "command": "vcs import < src/ros2.repos src",
      "problemMatcher": []
    },
    {
      "label": "update workspace file",
      "detail": "Use vcs to update repositories in src to workspace file.",
      "type": "shell",
      "command": "vcs export src > src/ros2.repos",
      "problemMatcher": []
    },
    {
      "label": "install dependencies",
      "detail": "Install all dependencies specified in the workspaces package.xml files.",
      "type": "shell",
      "command": "sudo apt-get update && rosdep update && rosdep install --from-paths src --ignore-src -y",
      "problemMatcher": []
    },
    {
      "label": "setup",
      "detail": "Set up the workspace",
      "type": "shell",
      "command": "./setup.sh",
      "problemMatcher": []
    },
    {
      "label": "add submodules from .repos",
      "detail": "Create a git submodule for all repositories in your .repos file",
      "type": "shell",
      "command": "python3 .devcontainer/repos_to_submodules.py",
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "packages_name",
      "type": "promptString",
      "description": "Enter the packages to select",
      "default": "robot_sim"
    }
  ]
}
